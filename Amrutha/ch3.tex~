\chapter{Preliminaries}
\label{pre}


To make the document self contained, a brief description of the technologies used are included as follows. 

\section{\label{prexml}eXtensible Markup Language (XML)}

XML (eXtensible Markup Language) is a specification for computer-readable documents. Markup means that certain sequences of characters in the document contain information indicating the role of the document's content.
The markup describes the documents data layout and logical structure and makes the information self-describing, in
a sense. It takes the form of words between tags, for example, $<name>$ or $<h1>$. In this
aspect, XML looks very much like the well-known language HTML.

However, extensible indicates an important difference and a main characteristic of XML. XML is actually a
metalanguage: a mechanism for representing other languages in a standardized way. In other words, XML only
provides a data format for structured documents, without specifying an actual vocabulary. This makes XML universally
applicable in the sense that we can define customized markup languages for unlimited types of documents. This has already
occurred on a massive scale. Besides many proprietary languages ranging from electronic order forms to application
file formats, a number of standard languages are defined in XML (called XML applications). 

In practice, XML is being used for a number of rather different purposes:

\begin{itemize}
\item as a serialization syntax for other markup languages.
\item as semantic markup of Web-pages. 
\item as a uniform data-exchange format.
\end{itemize}

\section{\label{prerdf}Resource Description Framework (RDF)}

The W3C defines RDF as follows: ``Resource Description Framework (RDF) is a foundation for processing metadata; it
provides interoperability between applications that exchange machine-understandable
information on the Web." Hence RDF is a model for describing metadata \cite{ERDDJD04}. 

The RDF model is based on \emph{statements}, a statement is used to say ``something" about resources. The ``something" is referred as a \emph{property} of the resource, so a statement
indicates the value of a resource's property. W3C defines Resource, Properties and Statements as follows:

\subsection{\label{prerdfres}Resources}
All things being described by RDF expressions are called resources. A resource may be an entire Web page; such as the HTML document \\ ``http://www.w3.org/test.htm". A resource may be a part of a Web page such as a specific HTML or XML element within the document source. A resource may also be a whole collection of pages (e.g. an entire Web site). A resource may also be an object that is not directly accessible via the Web (e.g. a printed book). Resources are always named by URIs plus optional anchor ids. Anything can have a URI; the extensibility of URIs allows the introduction of identifiers for any entity imaginable.

\subsection{\label{prerdfprp}Property}

A property is a specific aspect, characteristic, attribute, or relation used to describe a resource. Each property has a 
specific meaning, defines its permitted values, the types of resources it can describe, and its relationship with other 
properties. 

\subsection{\label{prerdfstmt}Statements}

A specific resource together with a named property plus the value of that property for that resource is a RDF statement. These three individual parts of a statement are called,
respectively, the subject, the predicate, and the object. The object of a statement (i.e., the property value) can be another resource or it can be a literal; i.e., a resource (specified by a
URI) or a simple string or other primitive datatype defined by XML. In RDF terms, a literal may have content that is XML markup but is not further evaluated by the RDF
processor. There are some syntactic restrictions on how markup in literals may be expressed. 

Every statement has 3 parts:
\begin{itemize}
\item Subject
\item Predicate
\item Object
\end{itemize}

Example:- 
``Dr Govindan is the HOD of CSE Department http://nitc.ac.in/csed". 

This sentence has the following parts:
\begin{itemize}
\item Subject (Resource) http://nitc.ac.in/csed
\item Predicate (Property) HOD 
\item Object (literal) ``Dr Govindan"
\end{itemize}


This can also be visualised as a graph - where subjects and objects are graph nodes and the predicates define directed arcs from a subject to an object.

\begin{figure}
\scalebox{0.60}
{\includegraphics{eg1.png}}
\caption{RDF Graph} \label{Fig:1}
\end{figure}

\section{\label{pregate}General Architecture for Text Engineering (GATE)}
GATE \cite{Cun00a} has been developed at the University of Sheffield since 1995 and has been used in a wide variety of research and development projects. GATE comprises an architecture, framework (or SDK) and graphical development environment, and has been built over the past eight years in the Sheffield NLP group. The system has been used for many language processing projects; in particular for Information Extraction in many languages. The system supports the full life cycle of language processing components, from corpus collection and annotation through system evaluation. GATE is funded by the EPSRC (The Engineering and Physical Sciences Research Council, UK) and the EU.

In fact, GATE is one of the most widely used human language processing systems in the world. It is a tool for: 
\begin{itemize}
\item scientists performing experiments that involve processing human language. 
\item companies developing applications with language processing components. 
\item teachers and students of courses about language and language computation.
\end{itemize}

GATE is an infrastructure for developing and deploying software components that process human language. GATE helps scientists and developers in three ways: 

\begin{itemize}
\item by specifying an architecture, or organizational structure, for language processing software. 
\item by providing a framework, or class library, that implements the architecture and can be used to embed language processing capabilities in diverse applications. 
\item by providing a development environment built on top of the framework made up of convenient graphical tools for developing components.
\end{itemize}

The architecture exploits component-based software development, object orientation and mobile code. The framework and development environment are written in Java and available as open-source free software under the GNU library license . GATE uses Unicode throughout.

Version 2 of the GATE is being used for this work, which was released on 30th July 2003.


\subsection{\label{implpha1annie}A Nearly New system for Information Extraction (ANNIE)}
ANNIE \cite{HDKVCNI04}\cite{HDKVCMMNI05}, is an Information Extraction (IE) system distributed with GATE. ANNIE relies on finite state algorithms and the Java Annotation Patterns Engine (JAPE) language.  ANNIE takes the document as the input and after several processes like Tokenizer, Gazetteer Lookup, Sentence Splitter, Semantic Tagger and Name Matcher, gives the output in the form of IE annotations.

\subsection{\label{implpha1jape}Java Annotation Patterns Engine (JAPE)}
JAPE allows us to recognise regular expressions in annotations on documents. 

A JAPE grammar consists of a set of phases, each of which consists of a set of pattern/action rules. The phases run sequentially and constitute a cascade of finite state transducers over annotations. The left-hand-side (LHS) of the rules consist of an annotation pattern that may contain regular expression operators. The right-hand-side (RHS) consists of annotation manipulation statements. Annotations matched on the LHS of a rule may be referred to on the RHS by means of labels that are attached to pattern elements \cite{HDKVCNI04}\cite{HDKVCMMNI05}.

\section{\label{prejena}Jena}

Jena, developed by Hewlett-Packard's Semantic Web team, is a full featured Java API for writing Semantic Web applications \cite{CDDRSA04}\cite{HP04}\cite{SH03}. Jena has

\begin{itemize}
\item statement centric methods for manipulating an RDF model as a set of RDF triples.
\item resource centric methods for manipulating an RDF model as a set of resources with properties.
\item cascading method calls for more convenient programming.
\item built-in support for RDF containers - bag, alt and seq.
\item enhanced resources - the application can extend the behaviour of resources.
\item integrated parsers and writers for RDF/XML (ARP), N3 and N-TRIPLES.
\item support for typed literals.
\end{itemize}

Jena's \emph{ModelFactory} class is the preferred means of creating different types of models. For eg, let us take the RDF model for representing all members of a family. Suppose that we want to represent the Name, Age and Sex of each member in the family. In this case, we need an empty in-memory model. So \\ModelFactory.createDefaultModel() is the method to call. This method returns an instance of Model, which we'll use to create a Resource representing each person in the family. After the resources are created, statements can be made about them and added the model.

In Jena, the subject of a statement is always a Resource, the predicate is represented by a Property, and the object is either another Resource or a literal value. Literals are represented in Jena by the Literal type. All of these types share a common interface, RDFNode. These instances are created with Model.createProperty().

The simplest way to add statements to a model is by calling \\Resource.addProperty(). This method creates a statement in the model with the Resource as its subject. The method takes two parameters, a Property representing the predicate of the statement, and the statement's object.  The addProperty() method is overloaded: One overload takes an RDFNode as the object, so a Resource or Literal can be used. There are also convenience overloads that take a literal represented by a Java primitive or a String. In our example, Resource will be family, Properties will be Name, Age and Sex and the Objects will be literals like Sonia, 58, Female.

Statements can also be created directly on the model by calling \\Model.createStatement() with the subject, predicate, and object of the triple. Note that creating a Statement in this way doesn't add it into the model.


\section{\label{presportsml}The International Press Telecommunications Council (IPTC) Standards}
IPTC was established in 1965 by a group of news organisations including the Alliance Européenne des Agences de Presse, ANPA (now NAA), FIEJ (now WAN) and the North American News Agencies (a joint committee of Associated Press, Canadian Press and United Press International) to safeguard the telecommunications interests of the World's Press.
Since the late 1970's IPTC's activities have primarily focused on developing and publishing Industry Standards for the interchange of news data.

The IPTC was founded in 1965 and is based in Windsor, UK.

To effectively package and distribute news, several standards are specified by IPTC. 

\begin{itemize}
\item \emph{NewsML} Method for packaging, relating, and managing diverse pieces of media. Offers a universal metadata approach to all sorts of specialised content formats.
\item \emph{NITF} A specialised format for marking up news stories. Helps a publisher differentiate a headline from a byline or paragraph, and also helps a publisher mark up inline text entities, such as organisations and people.
\item \emph{SportsML} A specialised format for sports scores, schedules, standings, and statistics.
\item \emph{ProgramGuideML} A specialised format for listings for program guides on television and radio.
\item \emph{NewsCodes} A Controlled vocabularies of terms of significance to publishers, all are branded as ``NewsCodes". Include a taxonomy of subject codes, listings of roles and genres of news components, and ratings for relevance, priority, urgency, and other characteristics.
\item \emph{IPTC Core XMP Schema} Set of metadata primarily for photos to be used by Adobe's Extensible Metadata Platform XMP. Successor to the ``IPTC Headers" used to describe millions of professional digital images.
\end{itemize}

